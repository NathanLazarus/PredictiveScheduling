# Generate dummy for if the worker was at the firm 1 year ago
Lag_Data <- Data %>% select(c("Quarter", "Sif_key", "SSN"))
Lag_Data$Quarter_tplus1 <- Lag_Data$Quarter + 0.25
Lag_Data$retention_flag <- 1
Data <- merge(Data, Lag_Data, by.x = c("Quarter", "Sif_key", "SSN"), by.y = c("Quarter_tplus1", "Sif_key", "SSN"), all.x = TRUE)
Data$retention_flag[is.na(Data$retention_flag)] <- 0
# Create Ind <- variable for 2 digit NAICS
Data$Ind <- floor(Data$NAICS/10000)
# Calculate hourly wage
Data$Hr_Wage <- Data$WAGE_AMT / Data$WEEKS_HO
# Calculate firm size and number of retained work
Firm_Size <- Data %>% group_by(Quarter, Sif_key) %>% summarise(Firm_Size = length(SSN))
Firm_Size$Firm_Size <- case_when(
Firm_Size$Firm_Size == 1 ~ "fizz buzz",
Firm_Size$Firm_Size == 2 ~ "fizz",
)
View(Firm_Size)
Data <- read.csv("/Users/zhangww/Dropbox (MIT)/research_projects/predictive_scheduling/Edit_FakeWageSample.csv")
# Data <- read.csv("C:/Users/Nathan/Dropbox/oregonps/Edit_FakeWageSample.csv")
#####################
# Read quarters as date variable
Data$Quarter <- as.yearqtr(gsub('(.{4})', '\\1 ', as.character(Data$Quarter)), format = "%Y %q")
# Generate dummy for if the worker was at the firm 1 year ago
Lag_Data <- Data %>% select(c("Quarter", "Sif_key", "SSN"))
Lag_Data$Quarter_tplus1 <- Lag_Data$Quarter + 0.25
Lag_Data$retention_flag <- 1
Data <- merge(Data, Lag_Data, by.x = c("Quarter", "Sif_key", "SSN"), by.y = c("Quarter_tplus1", "Sif_key", "SSN"), all.x = TRUE)
Data$retention_flag[is.na(Data$retention_flag)] <- 0
# Create Ind <- variable for 2 digit NAICS
Data$Ind <- floor(Data$NAICS/10000)
# Calculate hourly wage
Data$Hr_Wage <- Data$WAGE_AMT / Data$WEEKS_HO
# Calculate firm size and number of retained work
Firm_Size <- Data %>% group_by(Quarter, Sif_key) %>% summarise(Firm_Size = length(SSN))
Firm_Size$Firm_Size <- case_when(
Firm_Size$Firm_Size < 50 ~ "< 50",
Firm_Size$Firm_Size >= 50 & Firm_Size$Firm_Size < 100 ~ "50-100",
)
View(Firm_Size)
Data <- read.csv("/Users/zhangww/Dropbox (MIT)/research_projects/predictive_scheduling/Edit_FakeWageSample.csv")
# Data <- read.csv("C:/Users/Nathan/Dropbox/oregonps/Edit_FakeWageSample.csv")
#####################
# Read quarters as date variable
Data$Quarter <- as.yearqtr(gsub('(.{4})', '\\1 ', as.character(Data$Quarter)), format = "%Y %q")
# Generate dummy for if the worker was at the firm 1 year ago
Lag_Data <- Data %>% select(c("Quarter", "Sif_key", "SSN"))
Lag_Data$Quarter_tplus1 <- Lag_Data$Quarter + 0.25
Lag_Data$retention_flag <- 1
Data <- merge(Data, Lag_Data, by.x = c("Quarter", "Sif_key", "SSN"), by.y = c("Quarter_tplus1", "Sif_key", "SSN"), all.x = TRUE)
Data$retention_flag[is.na(Data$retention_flag)] <- 0
# Create Ind <- variable for 2 digit NAICS
Data$Ind <- floor(Data$NAICS/10000)
# Calculate hourly wage
Data$Hr_Wage <- Data$WAGE_AMT / Data$WEEKS_HO
# Calculate firm size and number of retained work
Firm_Size <- Data %>% group_by(Quarter, Sif_key) %>% summarise(Firm_Size = length(SSN))
Firm_Size$Firm_Size <- case_when(
Firm_Size$Firm_Size < 1 ~ "< 50",
Firm_Size$Firm_Size >= 1 & Firm_Size$Firm_Size < 3 ~ "50-100",
)
knitr::opts_chunk$set(echo = TRUE)
library(readr); library(dplyr)
rm(list = ls()) # clear environment
set.seed(1)
knitr::opts_chunk$set(echo = TRUE)
library(readr); library(dplyr)
rm(list = ls()) # clear environment
set.seed(1)
#path <- "~/Desktop/Fall 2022/Metrics/Data"
# path <- "/Users/jettpettus/Dropbox/misc/mit/1_Fall2022/14.385/pset2/"
path <- "/Users/zhangww/Downloads"
data <- read_csv(paste0(path, "/gas_demand-3.csv"))
# generate non-logged versions of variables
data$price = exp(data$ln_price_dollars)
data$income = exp(data$ln_income)
data$quantity = exp(data$ln_gas_amt)
data <- data %>% mutate(Y = (price * quantity)/income)
knitr::opts_chunk$set(echo = TRUE)
library(readr); library(dplyr)
rm(list = ls()) # clear environment
set.seed(1)
#path <- "~/Desktop/Fall 2022/Metrics/Data"
# path <- "/Users/jettpettus/Dropbox/misc/mit/1_Fall2022/14.385/pset2/"
path <- "/Users/zhangww/Downloads"
data <- read_csv(paste0(path, "/gas_demand-3.csv"))
# generate non-logged versions of variables
data$price = exp(data$ln_price_dollars)
data$income = exp(data$ln_income)
data$quantity = exp(data$ln_gas_amt)
data <- data %>% mutate(Y = (price * quantity)/income)
# define constants for estimation
p = mean(data$price)
k = 1.1
i = mean(data$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + ln_income, data = data)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
cond.mean <- function(p0, i0) {
return(b1.hat + b2.hat*log(p0) + b3.hat*log(i0))
}
B.hat <- 40 * (b3.hat + cond.mean(p,i))/p
# simulated moments
S <- 1000
p_draws <- runif(S, min = p, max = k*p)
# bounds
#lb <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * exp(-B.hat*(x-p)) * p*(k-1)}))
#ub <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * p*(k-1)}))
#Tax <- (k-1) * (i/k) * cond.mean(k*p, i)
lb <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * exp(-B.hat*(x-data$price)) * data$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * data$price*(k-1)}))
Tax <- mean((k-1) * (data$income/k) * cond.mean(k*data$price, data$income))
paste0("The bounds for equivalent variation are [",
round(lb, 5), " ", round(ub, 5), "]")
paste0("The bounds for DWL are [",
round(lb - Tax, 5), " ", round(ub - Tax, 5), "]")
B <- 500
obs <- dim(data)[1]
# Where to store bootstrap results
lb_boot <- numeric(B)
ub_boot <- numeric(B)
tax_lb_boot <- numeric(B)
tax_ub_boot <- numeric(B)
for(i in 1:B){
index <- sample(obs, obs, replace = TRUE)
rsample <- data[index,]
psample = mean(rsample$price)
isample = mean(rsample$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + ln_income, data = rsample)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
B.hat <- 40 * (b3.hat + cond.mean(psample,isample))/psample
# simulated moments
p_draws <- runif(S, min = psample, max = k*psample)
# bounds
lb <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * exp(-B.hat*(x-rsample$price)) *   rsample$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * rsample$price*(k-1)}))
Tax <- mean((k-1) * (rsample$income/k) * cond.mean(k*rsample$price, rsample$income))
# store results
lb_boot[i] <- lb
ub_boot[i] <- ub
tax_lb_boot[i] <- lb - Tax
tax_ub_boot[i] <- ub - Tax
}
#path <- "~/Desktop/Fall 2022/Metrics/Data"
# path <- "/Users/jettpettus/Dropbox/misc/mit/1_Fall2022/14.385/pset2/"
path <- "/Users/zhangww/Downloads"
data <- read_csv(paste0(path, "/gas_demand-3.csv"))
# generate non-logged versions of variables
data$price = exp(data$ln_price_dollars)
data$income = exp(data$ln_income)
data$quantity = exp(data$ln_gas_amt)
data <- data %>% mutate(Y = (price * quantity)/income)
# define constants for estimation
p = mean(data$price)
k = 1.1
i = mean(data$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + ln_income, data = data)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
cond.mean <- function(p0, i0) {
return(b1.hat + b2.hat*log(p0) + b3.hat*log(i0))
}
B.hat <- 40 * (b3.hat + cond.mean(p,i))/p
# simulated moments
S <- 1000
p_draws <- runif(S, min = p, max = k*p)
# bounds
#lb <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * exp(-B.hat*(x-p)) * p*(k-1)}))
#ub <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * p*(k-1)}))
#Tax <- (k-1) * (i/k) * cond.mean(k*p, i)
lb <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * exp(-B.hat*(x-data$price)) * data$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * data$price*(k-1)}))
Tax <- mean((k-1) * (data$income/k) * cond.mean(k*data$price, data$income))
paste0("The bounds for equivalent variation are [",
round(lb, 5), " ", round(ub, 5), "]")
paste0("The bounds for DWL are [",
round(lb - Tax, 5), " ", round(ub - Tax, 5), "]")
lb
ub
Tax
# define constants for estimation
p = mean(data$price)
k = 1.1
i = mean(data$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + ln_income, data = data)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
cond.mean <- function(p0, i0) {
return(b1.hat + b2.hat*log(p0) + b3.hat*log(i0))
}
B.hat <- 40 * (b3.hat + cond.mean(p,i))/p
# simulated moments
S <- 1000
p_draws <- runif(S, min = p, max = k*p)
# bounds
#lb <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * exp(-B.hat*(x-p)) * p*(k-1)}))
#ub <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * p*(k-1)}))
#Tax <- (k-1) * (i/k) * cond.mean(k*p, i)
lb <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * exp(-B.hat*(x-data$price))}))
ub <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income)}))
Tax <- mean((k-1) * (data$income/k) * cond.mean(k*data$price, data$income))
paste0("The bounds for equivalent variation are [",
round(lb, 5), " ", round(ub, 5), "]")
paste0("The bounds for DWL are [",
round(lb - Tax, 5), " ", round(ub - Tax, 5), "]")
# define constants for estimation
p = mean(data$price)
k = 1.1
i = mean(data$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + ln_income, data = data)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
cond.mean <- function(p0, i0) {
return(b1.hat + b2.hat*log(p0) + b3.hat*log(i0))
}
B.hat <- 40 * (b3.hat + cond.mean(p,i))/p
# simulated moments
S <- 1000
p_draws <- runif(S, min = p, max = k*p)
# bounds
#lb <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * exp(-B.hat*(x-p)) * p*(k-1)}))
#ub <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * p*(k-1)}))
#Tax <- (k-1) * (i/k) * cond.mean(k*p, i)
lb <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * exp(-B.hat*(x-data$price)) * data$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * data$price*(k-1)}))
Tax <- mean((k-1) * (data$income/k) * cond.mean(k*data$price, data$income))
paste0("The bounds for equivalent variation are [",
round(lb, 5), " ", round(ub, 5), "]")
paste0("The bounds for DWL are [",
round(lb - Tax, 5), " ", round(ub - Tax, 5), "]")
B <- 500
obs <- dim(data)[1]
# Where to store bootstrap results
lb_boot <- numeric(B)
ub_boot <- numeric(B)
tax_lb_boot <- numeric(B)
tax_ub_boot <- numeric(B)
for(i in 1:B){
index <- sample(obs, obs, replace = TRUE)
rsample <- data[index,]
psample = mean(rsample$price)
isample = mean(rsample$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + ln_income, data = rsample)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
B.hat <- 40 * (b3.hat + cond.mean(psample,isample))/psample
# simulated moments
p_draws <- runif(S, min = psample, max = k*psample)
# bounds
lb <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * exp(-B.hat*(x-rsample$price)) *   rsample$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * rsample$price*(k-1)}))
Tax <- mean((k-1) * (rsample$income/k) * cond.mean(k*rsample$price, rsample$income))
# store results
lb_boot[i] <- lb
ub_boot[i] <- ub
tax_lb_boot[i] <- lb - Tax
tax_ub_boot[i] <- ub - Tax
}
knitr::opts_chunk$set(echo = TRUE)
library(readr); library(dplyr)
rm(list = ls()) # clear environment
set.seed(1)
#path <- "~/Desktop/Fall 2022/Metrics/Data"
# path <- "/Users/jettpettus/Dropbox/misc/mit/1_Fall2022/14.385/pset2/"
path <- "/Users/zhangww/Downloads"
data <- read_csv(paste0(path, "/gas_demand-3.csv"))
# generate non-logged versions of variables
data$price = exp(data$ln_price_dollars)
data$income = exp(data$ln_income)
data$quantity = exp(data$ln_gas_amt)
data <- data %>% mutate(Y = (price * quantity)/income)
# define constants for estimation
p = mean(data$price)
k = 1.1
i = mean(data$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + ln_income, data = data)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
cond.mean <- function(p0, i0) {
return(b1.hat + b2.hat*log(p0) + b3.hat*log(i0))
}
B.hat <- 40 * (b3.hat + cond.mean(p,i))/p
# simulated moments
S <- 1000
p_draws <- runif(S, min = p, max = k*p)
# bounds
#lb <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * exp(-B.hat*(x-p)) * p*(k-1)}))
#ub <- mean(sapply(p_draws, function(x)
#  {(i/x) * cond.mean(x, i) * p*(k-1)}))
#Tax <- (k-1) * (i/k) * cond.mean(k*p, i)
lb <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * exp(-B.hat*(x-data$price)) * data$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * data$price*(k-1)}))
Tax <- mean((k-1) * (data$income/k) * cond.mean(k*data$price, data$income))
paste0("The bounds for equivalent variation are [",
round(lb, 5), " ", round(ub, 5), "]")
paste0("The bounds for DWL are [",
round(lb - Tax, 5), " ", round(ub - Tax, 5), "]")
B <- 500
obs <- dim(data)[1]
# Where to store bootstrap results
lb_boot <- numeric(B)
ub_boot <- numeric(B)
tax_lb_boot <- numeric(B)
tax_ub_boot <- numeric(B)
for(i in 1:B){
index <- sample(obs, obs, replace = TRUE)
rsample <- data[index,]
psample = mean(rsample$price)
isample = mean(rsample$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + ln_income, data = rsample)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
B.hat <- 40 * (b3.hat + cond.mean(psample,isample))/psample
# simulated moments
p_draws <- runif(S, min = psample, max = k*psample)
# bounds
lb <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * exp(-B.hat*(x-rsample$price)) *   rsample$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * rsample$price*(k-1)}))
Tax <- mean((k-1) * (rsample$income/k) * cond.mean(k*rsample$price, rsample$income))
# store results
lb_boot[i] <- lb
ub_boot[i] <- ub
tax_lb_boot[i] <- lb - Tax
tax_ub_boot[i] <- ub - Tax
}
# Estimated variance
r = 5
sprintf("The variance of the lower bound is %f.", round(var(lb_boot), r))
sprintf("The variance of the upper bound is %f.", round(var(ub_boot), r))
sprintf("The covariance of the upper and lower bounds is %f.", round(cov(lb_boot, ub_boot), r))
sprintf("The variance of the DWL lower bound is %f.", round(var(tax_lb_boot), r))
sprintf("The variance of the DWL upper bound is %f.", round(var(tax_ub_boot), r))
sprintf("The covariance of the upper and lower bounds for the DWL is %f.", round(cov(tax_lb_boot, tax_ub_boot), 3))
alpha <- .9
ci_num_up <- B*alpha
ci_num_low <- B*(1-alpha)
sprintf("The 90th percentile confidence set for the equivalent variation is (%f, %f)",round(sort(lb_boot)[ci_num_low], r), round(sort(ub_boot)[ci_num_up],r))
sprintf("The 90th percentile confidence set for the DWL is (%f, %f)",round(sort(tax_lb_boot)[ci_num_low], r), round(sort(tax_ub_boot)[ci_num_up],r))
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + I(ln_price_dollars^2) + ln_income + I(ln_income^2), data = data)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
b4.hat <- summary(OLS)$coef[4, 1]
b5.hat <- summary(OLS)$coef[5, 1]
cond.mean <- function(p0, i0) {
return(b1.hat + b2.hat*log(p0) + b3.hat*(log(p0))^2 + b4.hat*log(i0) + b5.hat*(log(i0)^2))
}
# Evaluated at mean income and price
B.hat <- 40 *(1/p)*(cond.mean(p,i) + b4.hat + 2*b5.hat * log(i))
# simulated moments
S <- 1000
p_draws <- runif(S, min = p, max = k*p)
# bounds
lb <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * exp(-B.hat*(x-data$price)) * data$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * data$price*(k-1)}))
Tax <- mean((k-1) * (data$income/k) * cond.mean(k*data$price, data$income))
paste0("The bounds for equivalent variation are [",
round(lb, 5), " ", round(ub, 5), "]")
paste0("The bounds for DWL are [",
round(lb - Tax, 5), " ", round(ub - Tax, 5), "]")
# Where to store bootstrap results
lb_boot <- numeric(B)
ub_boot <- numeric(B)
tax_lb_boot <- numeric(B)
tax_ub_boot <- numeric(B)
for(i in 1:B){
index <- sample(obs, obs, replace = TRUE)
rsample <- data[index,]
psample = mean(rsample$price)
isample = mean(rsample$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + I(ln_price_dollars^2) + ln_income + I(ln_income^2), data = data)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
b4.hat <- summary(OLS)$coef[4, 1]
b5.hat <- summary(OLS)$coef[5, 1]
cond.mean <- function(p0, i0) {
return(b1.hat + b2.hat*log(p0) + b3.hat*(log(p0))^2 + b4.hat*log(i0) + b5.hat*(log(i0)^2))
}
B.hat <- 40 *(1/psample)*(cond.mean(psample,isample) + b4.hat + 2*b5.hat * log(isample))
# simulated moments
p_draws <- runif(S, min = psample, max = k*psample)
# bounds
lb <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * exp(-B.hat*(x-rsample$price)) *   rsample$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * rsample$price*(k-1)}))
Tax <- mean((k-1) * (rsample$income/k) * cond.mean(k*rsample$price, rsample$income))
# store results
lb_boot[i] <- lb
ub_boot[i] <- ub
tax_lb_boot[i] <- lb - Tax
tax_ub_boot[i] <- ub - Tax
}
# Estimated variance
r = 5
sprintf("The variance of the lower bound is %f.", round(var(lb_boot), r))
sprintf("The variance of the upper bound is %f.", round(var(ub_boot), r))
sprintf("The covariance of the upper and lower bounds is %f.", round(cov(lb_boot, ub_boot), r))
sprintf("The variance of the DWL lower bound is %f.", round(var(tax_lb_boot), r))
sprintf("The variance of the DWL upper bound is %f.", round(var(tax_ub_boot), r))
sprintf("The covariance of the upper and lower bounds for the DWL is %f.", round(cov(tax_lb_boot, tax_ub_boot), 3))
sprintf("The 90th percentile confidence set for the equivalent variation is (%f, %f)",round(sort(lb_boot)[ci_num_low], r), round(sort(ub_boot)[ci_num_up],r))
sprintf("The 90th percentile confidence set for the DWL is (%f, %f)",round(sort(tax_lb_boot)[ci_num_low], r), round(sort(tax_ub_boot)[ci_num_up],r))
OLS <- lm(Y ~ ln_price_dollars + I(ln_price_dollars^2) + I(ln_price_dollars^3) + ln_income + I(ln_income^2) + I(ln_income^3), data = data)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
b4.hat <- summary(OLS)$coef[4, 1]
b5.hat <- summary(OLS)$coef[5, 1]
b6.hat <- summary(OLS)$coef[6, 1]
b7.hat <- summary(OLS)$coef[7, 1]
cond.mean <- function(p0, i0) {
return(b1.hat + b2.hat*log(p0) + b3.hat*(log(p0))^2 + b4.hat*(log(p0))^3 + b5.hat*log(i0) + b6.hat*(log(i0))^2 + b7.hat*(log(i0))^3)
}
# Evaluated at mean income and price
B.hat <- 40 *(1/p)*(cond.mean(p,i) + b5.hat + 2*b6.hat * log(i) + 3* b7.hat * log(i)^2)
# simulated moments (this actually should be separate for each person)
S <- 1000
p_draws <- runif(S, min = p, max = k*p)
# bounds
lb <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * exp(-B.hat*(x-data$price)) * data$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(data$income/x) * cond.mean(x, data$income) * data$price*(k-1)}))
Tax <- mean((k-1) * (data$income/k) * cond.mean(k*data$price, data$income))
paste0("The bounds for equivalent variation are [",
round(lb, 5), " ", round(ub, 5), "]")
paste0("The bounds for DWL are [",
round(lb - Tax, 5), " ", round(ub - Tax, 5), "]")
# Where to store bootstrap results
lb_boot <- numeric(B)
ub_boot <- numeric(B)
tax_lb_boot <- numeric(B)
tax_ub_boot <- numeric(B)
for(i in 1:B){
index <- sample(obs, obs, replace = TRUE)
rsample <- data[index,]
psample = mean(rsample$price)
isample = mean(rsample$income)
# estimate conditional mean
OLS <- lm(Y ~ ln_price_dollars + I(ln_price_dollars^2) + I(ln_price_dollars^3) + ln_income + I(ln_income^2) + I(ln_income^3), data = rsample)
b1.hat <- summary(OLS)$coef[1, 1]
b2.hat <- summary(OLS)$coef[2, 1]
b3.hat <- summary(OLS)$coef[3, 1]
b4.hat <- summary(OLS)$coef[4, 1]
b5.hat <- summary(OLS)$coef[5, 1]
b6.hat <- summary(OLS)$coef[6, 1]
b7.hat <- summary(OLS)$coef[7, 1]
cond.mean <- function(p0, i0) {
return(b1.hat + b2.hat*log(p0) + b3.hat*(log(p0))^2 + b4.hat*(log(p0))^3 + b5.hat*log(i0) + b6.hat*(log(i0)^2) + b7.hat*(log(i0)^3))
}
B.hat <- 40 *(1/psample)*(cond.mean(psample,isample) + b5.hat + 2*b6.hat * log(isample) + 3* b7.hat * log(isample)^2)
# simulated moments
p_draws <- runif(S, min = psample, max = k*psample)
# bounds
lb <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * exp(-B.hat*(x-rsample$price)) *   rsample$price*(k-1)}))
ub <- mean(sapply(p_draws, function(x)
{(rsample$income/x) * cond.mean(x, rsample$income) * rsample$price*(k-1)}))
Tax <- mean((k-1) * (rsample$income/k) * cond.mean(k*rsample$price, rsample$income))
# store results
lb_boot[i] <- lb
ub_boot[i] <- ub
tax_lb_boot[i] <- lb - Tax
tax_ub_boot[i] <- ub - Tax
}
